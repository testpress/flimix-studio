import React, { useState, useEffect } from 'react';
import BaseWidget from '@blocks/shared/BaseWidget';
import type { BaseWidgetProps } from '@blocks/shared/BaseWidget';
import type { FAQAccordionBlock } from './schema';
import { FAQ_ACCORDION_ITEM_LIMIT } from './schema';
import { useSelection } from '@context/SelectionContext';
import ItemsControl from '@blocks/shared/ItemsControl';
import { ChevronDown, ChevronRight, HelpCircle } from 'lucide-react';

interface FAQAccordionWidgetProps extends Omit<BaseWidgetProps<FAQAccordionBlock>, 'block'> {
  block: FAQAccordionBlock;
}

export const FAQAccordionWidget: React.FC<FAQAccordionWidgetProps> = ({
  block,
  onSelect,
  isSelected = false,
  canMoveUp,
  canMoveDown,
  onMoveUp,
  onMoveDown,
  onDuplicate,
  onRemove,
}) => {
  const { title, items, defaultOpenIndex } = block.props;
  const { style } = block;

  const [openIndex, setOpenIndex] = useState(defaultOpenIndex ?? -1);
  const { addBlockItem, selectArrayItem, isItemSelected, moveBlockItemUp, moveBlockItemDown, removeBlockItem } = useSelection();

  useEffect(() => {
    setOpenIndex(defaultOpenIndex ?? -1);
  }, [defaultOpenIndex]);

  const handleAddItem = () => {
    const currentItemCount = items?.length || 0;
    
    if (currentItemCount >= FAQ_ACCORDION_ITEM_LIMIT) {
      return; // Don't add more items if at limit
    }
    
    const defaultItem = {
      id: '', // Will be generated by addBlockItem
      question: 'New Question',
      answer: 'New Answer',
      style: {
        backgroundColor: '#ffffff',
        textColor: '#000000',
        fontWeight: 'normal' as const,
        padding: 'sm' as const,
        margin: 'md' as const,
        borderRadius: 'md' as const,
      },
    };
    
    const newId = addBlockItem(block.id, defaultItem);
    selectArrayItem(block.id, newId);
  };

  const handleQuestionClick = (e: React.MouseEvent, itemId: string, index: number) => {
    e.stopPropagation();
    
    // First, select the item
    selectArrayItem(block.id, itemId);
    
    // Then, toggle the accordion
    setOpenIndex(index === openIndex ? -1 : index);
  };

  // Check if we're at the item limit
  const isAtItemLimit = (items?.length || 0) >= FAQ_ACCORDION_ITEM_LIMIT;

  // Get styling classes based on block style
  const paddingClass = style?.padding === 'lg' ? 'p-4 sm:p-6 md:p-8' : 
                      style?.padding === 'md' ? 'p-3 sm:p-4 md:p-6' : 
                      style?.padding === 'sm' ? 'p-2 sm:p-3 md:p-4' : 'p-3 sm:p-4 md:p-6';
  
  const textAlignClass = style?.textAlign === 'center' ? 'text-center' :
                        style?.textAlign === 'right' ? 'text-right' : 'text-left';

  // Handle text color - if it's a hex value, use inline style, otherwise use Tailwind class
  const isHexColor = style?.textColor && style.textColor.startsWith('#');

  // Determine background styling
  const hasCustomBackground = !!style?.backgroundColor;
  const defaultBackgroundClass = 'bg-black';
  const backgroundClass = hasCustomBackground ? '' : defaultBackgroundClass;

  // Style value mappings for cleaner code - reduced padding values
  const borderRadiusMap = {
    none: '0',
    sm: '0.25rem',
    md: '0.5rem',
    lg: '1rem',
  };

  const marginMap = {
    none: '0',
    sm: '0.5rem',
    md: '1rem',
    lg: '1.5rem',
  };

  const boxShadowMap = {
    none: 'none',
    sm: '0 1px 2px 0 rgba(0, 0, 0, 0.05)',
    md: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',
    lg: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
  };

  const itemPaddingMap = {
    sm: '0.75rem',
    md: '1rem',
    lg: '1.25rem',
  };

  const itemMarginMap = {
    sm: '0.25rem',
    md: '0.5rem',
    lg: '1rem',
  };

  // Build complete style object for BaseWidget - this applies to the main container
  const widgetStyle: React.CSSProperties = {
    backgroundColor: hasCustomBackground ? style.backgroundColor : undefined,
    color: isHexColor ? style.textColor : undefined,
    borderRadius: style?.borderRadius ? borderRadiusMap[style.borderRadius] : undefined,
    margin: style?.margin ? marginMap[style.margin] : undefined,
    boxShadow: style?.boxShadow ? boxShadowMap[style.boxShadow] : undefined,
    maxWidth: style?.maxWidth || undefined,
  };

  if (!items || items.length === 0) {
    return (
      <BaseWidget 
        block={block} 
        onSelect={onSelect} 
        isSelected={isSelected}
        canMoveUp={canMoveUp}
        canMoveDown={canMoveDown}
        onMoveUp={onMoveUp}
        onMoveDown={onMoveDown}
        onDuplicate={onDuplicate}
        onRemove={onRemove}
        onAddItem={!isAtItemLimit ? handleAddItem : undefined}
        className={`${backgroundClass} ${paddingClass} ${textAlignClass}`}
        style={widgetStyle}
      >
        <div className="faq-accordion">
          {title && (
            <h3 
              className="text-2xl font-bold mb-6"
              style={{ color: style?.textColor || undefined }}
            >
              {title}
            </h3>
          )}
          
          <div className="text-center py-8 text-gray-500 border-2 border-dashed border-gray-300 rounded-lg">
            <p className="mb-2">No FAQ items yet</p>
            <p className="text-sm">Click the + button to add your first FAQ (max {FAQ_ACCORDION_ITEM_LIMIT} items)</p>
          </div>
        </div>
      </BaseWidget>
    );
  }

  return (
    <BaseWidget 
      block={block} 
      onSelect={onSelect} 
      isSelected={isSelected}
      canMoveUp={canMoveUp}
      canMoveDown={canMoveDown}
      onMoveUp={onMoveUp}
      onMoveDown={onMoveDown}
      onDuplicate={onDuplicate}
      onRemove={onRemove}
      onAddItem={!isAtItemLimit ? handleAddItem : undefined}
      className={`${backgroundClass} ${paddingClass} ${textAlignClass}`}
      style={widgetStyle}
    >
      <div className="faq-accordion">
        {title && (
          <h3 
            className="text-2xl font-bold mb-6"
            style={{ color: style?.textColor || undefined }}
          >
            {title}
          </h3>
        )}
        
        <div className="space-y-2">
          {items.map((item, index) => {
            // Build item-specific styles using mappings
            const itemStyle: React.CSSProperties = {
              backgroundColor: item.style?.backgroundColor || undefined,
              color: item.style?.textColor || undefined,
              padding: item.style?.padding ? itemPaddingMap[item.style.padding] : undefined,
              margin: item.style?.margin ? itemMarginMap[item.style.margin] : undefined,
              borderRadius: item.style?.borderRadius ? borderRadiusMap[item.style.borderRadius] : undefined,
            };

            return (
              <div 
                key={item.id} 
                className={`
                  border border-gray-200 overflow-hidden relative group
                  ${isItemSelected(block.id, item.id) ? 'ring-2 ring-blue-500 ring-offset-1' : ''}
                  cursor-pointer
                `}
                style={itemStyle}
                onClick={(e) => handleQuestionClick(e, item.id, index)}
              >
                <div 
                  className={`
                    w-full text-left flex items-center justify-between
                    transition-all duration-200
                    ${item.style?.fontWeight === 'bold' ? 'font-bold' : 'font-normal'}
                  `}
                  style={{ 
                    backgroundColor: item.style?.backgroundColor || undefined,
                    color: item.style?.textColor || undefined,
                  }}
                >
                  <div className="flex items-center gap-3">
                    <HelpCircle size={18} className="text-gray-500 flex-shrink-0" />
                    <span className="text-lg">{item.question}</span>
                  </div>
                  
                  <div className="flex-shrink-0">
                    {openIndex === index ? (
                      <ChevronDown size={20} className="text-gray-500 flex-shrink-0" />
                    ) : (
                      <ChevronRight size={20} className="text-gray-500 flex-shrink-0" />
                    )}
                  </div>
                </div>
                
                {openIndex === index && (
                  <div
                    id={`faq-answer-${item.id}`}
                    className="px-4 pb-4"
                    style={{ 
                      backgroundColor: item.style?.backgroundColor || 'rgba(255,255,255,0.05)',
                      color: item.style?.textColor || undefined,
                    }}
                  >
                    <div className="pt-2 leading-relaxed">
                      {item.answer}
                    </div>
                  </div>
                )}

                {/* Item Controls - visible on hover and when selected */}
                <ItemsControl 
                  index={index}
                  count={items.length}
                  onMoveUp={() => moveBlockItemUp(block.id, index)}
                  onMoveDown={() => moveBlockItemDown(block.id, index)}
                  onRemove={() => removeBlockItem(block.id, item.id)}
                  className="absolute top-2 right-10 flex space-x-1 bg-white/95 rounded-lg p-1 shadow-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 z-10"
                />
              </div>
            );
          })}
        </div>
      </div>
    </BaseWidget>
  );
};

export default FAQAccordionWidget; 