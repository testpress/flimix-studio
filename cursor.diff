diff --git a/src/App.tsx b/src/App.tsx
index c659428..970d95e 100644
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -1,15 +1,33 @@
-import React from 'react';
+import React, { useState } from 'react';
 import TopBar from './components/TopBar';
 import Canvas from './components/Canvas';
 import Sidebar from './components/Sidebar';
+import type { Block, VisibilityProps } from './schema/blockTypes';
 
 function App() {
+  const [selectedBlock, setSelectedBlock] = useState<Block | null>(null);
+  const [selectedBlockId, setSelectedBlockId] = useState<string | null>(null);
+
+  const handleUpdateVisibility = (visibility: VisibilityProps) => {
+    if (selectedBlock) {
+      // In a real app, this would update the block in the schema
+      // For now, we'll just log the change
+      console.log('Updating visibility for block:', selectedBlock.id, visibility);
+    }
+  };
+
   return (
     <div className="h-screen flex flex-col bg-gray-50">
       <TopBar />
       <div className="flex-1 flex">
-        <Canvas />
-        <Sidebar />
+        <Canvas 
+          selectedBlockId={selectedBlockId}
+          setSelectedBlockId={setSelectedBlockId}
+        />
+        <Sidebar 
+          selectedBlock={selectedBlock}
+          onUpdateVisibility={handleUpdateVisibility}
+        />
       </div>
     </div>
   );
diff --git a/src/components/BlockRenderer.tsx b/src/components/BlockRenderer.tsx
index f75716f..243c6b4 100644
--- a/src/components/BlockRenderer.tsx
+++ b/src/components/BlockRenderer.tsx
@@ -10,9 +10,17 @@ interface BlockRendererProps {
   block: Block;
   showDebug?: boolean;
   renderContext: RenderContext;
+  onSelect?: (id: string) => void;
+  isSelected?: boolean;
 }
 
-const BlockRenderer: React.FC<BlockRendererProps> = ({ block, showDebug = false, renderContext }) => {
+const BlockRenderer: React.FC<BlockRendererProps> = ({ 
+  block, 
+  showDebug = false, 
+  renderContext, 
+  onSelect, 
+  isSelected = false 
+}) => {
   // Evaluate visibility before rendering
   if (!evaluateVisibility(block.visibility, renderContext)) {
     if (showDebug) {
@@ -50,22 +58,37 @@ const BlockRenderer: React.FC<BlockRendererProps> = ({ block, showDebug = false,
     }
   }
 
-  switch (block.type) {
-    case 'hero':
-      return <HeroBlock block={block as HeroBlockType} />;
-    case 'text':
-      return <TextBlock block={block as TextBlockType} />;
-    case 'section':
-      // Pass renderContext and showDebug to SectionBlock via a custom prop
-      return <SectionBlock block={block as SectionBlockType} renderContext={renderContext} showDebug={showDebug} />;
-    default:
-      return (
-        <div className="p-4 border-2 border-dashed border-red-300 bg-red-50 rounded-lg">
-          <p className="text-red-600 font-medium">Unknown block type: {block.type}</p>
-          <p className="text-red-500 text-sm mt-1">Block ID: {block.id}</p>
-        </div>
-      );
-  }
+  const handleClick = () => {
+    onSelect?.(block.id);
+  };
+
+  const renderBlock = () => {
+    switch (block.type) {
+      case 'hero':
+        return <HeroBlock block={block as HeroBlockType} />;
+      case 'text':
+        return <TextBlock block={block as TextBlockType} />;
+      case 'section':
+        // Pass renderContext and showDebug to SectionBlock via a custom prop
+        return <SectionBlock block={block as SectionBlockType} renderContext={renderContext} showDebug={showDebug} />;
+      default:
+        return (
+          <div className="p-4 border-2 border-dashed border-red-300 bg-red-50 rounded-lg">
+            <p className="text-red-600 font-medium">Unknown block type: {block.type}</p>
+            <p className="text-red-500 text-sm mt-1">Block ID: {block.id}</p>
+          </div>
+        );
+    }
+  };
+
+  return (
+    <div 
+      onClick={handleClick}
+      className={`cursor-pointer transition-all duration-200 ${isSelected ? 'ring-2 ring-blue-500' : ''}`}
+    >
+      {renderBlock()}
+    </div>
+  );
 };
 
 export default BlockRenderer; 
\ No newline at end of file
diff --git a/src/components/Canvas.tsx b/src/components/Canvas.tsx
index 74936a3..881d7cd 100644
--- a/src/components/Canvas.tsx
+++ b/src/components/Canvas.tsx
@@ -131,9 +131,18 @@ const initialRenderContext: RenderContext = {
   platform: 'mobile',
 };
 
-const Canvas: React.FC = () => {
+interface CanvasProps {
+  selectedBlockId: string | null;
+  setSelectedBlockId: (id: string | null) => void;
+}
+
+const Canvas: React.FC<CanvasProps> = ({ selectedBlockId, setSelectedBlockId }) => {
   const [renderContext, setRenderContext] = useState<RenderContext>(initialRenderContext);
 
+  const handleBlockSelect = (id: string) => {
+    setSelectedBlockId(id);
+  };
+
   return (
     <div className="flex-1 bg-gray-100 p-6">
       <div className="bg-white rounded-lg shadow-lg p-8 min-h-[600px]">
@@ -227,7 +236,14 @@ const Canvas: React.FC = () => {
         
         <div className="space-y-6">
           {sampleSchema.blocks.map((block) => (
-            <BlockRenderer key={block.id} block={block} showDebug={showDebug} renderContext={renderContext} />
+            <BlockRenderer 
+              key={block.id} 
+              block={block} 
+              showDebug={showDebug} 
+              renderContext={renderContext}
+              onSelect={handleBlockSelect}
+              isSelected={selectedBlockId === block.id}
+            />
           ))}
         </div>
       </div>
diff --git a/src/components/Sidebar.tsx b/src/components/Sidebar.tsx
index ea6f2cb..017d44c 100644
--- a/src/components/Sidebar.tsx
+++ b/src/components/Sidebar.tsx
@@ -1,6 +1,56 @@
 import React from 'react';
+import type { Block, VisibilityProps, Platform } from '../schema/blockTypes';
+
+interface SidebarProps {
+  selectedBlock: Block | null;
+  onUpdateVisibility: (visibility: VisibilityProps) => void;
+}
+
+const Sidebar: React.FC<SidebarProps> = ({ selectedBlock, onUpdateVisibility }) => {
+  const handleVisibilityChange = (field: keyof VisibilityProps, value: any) => {
+    if (!selectedBlock) return;
+    
+    const currentVisibility = selectedBlock.visibility || {};
+    const newVisibility = {
+      ...currentVisibility,
+      [field]: value
+    };
+    
+    onUpdateVisibility(newVisibility);
+  };
+
+  const handlePlatformChange = (platform: Platform, checked: boolean) => {
+    if (!selectedBlock) return;
+    
+    const currentVisibility = selectedBlock.visibility || {};
+    const currentPlatforms = currentVisibility.platform || [];
+    
+    let newPlatforms: Platform[];
+    if (checked) {
+      newPlatforms = [...currentPlatforms, platform];
+    } else {
+      newPlatforms = currentPlatforms.filter(p => p !== platform);
+    }
+    
+    handleVisibilityChange('platform', newPlatforms);
+  };
+
+  const handleRegionChange = (region: string, checked: boolean) => {
+    if (!selectedBlock) return;
+    
+    const currentVisibility = selectedBlock.visibility || {};
+    const currentRegions = currentVisibility.region || [];
+    
+    let newRegions: string[];
+    if (checked) {
+      newRegions = [...currentRegions, region];
+    } else {
+      newRegions = currentRegions.filter(r => r !== region);
+    }
+    
+    handleVisibilityChange('region', newRegions);
+  };
 
-const Sidebar: React.FC = () => {
   return (
     <div className="w-80 bg-white border-l border-gray-200 p-6">
       <div className="mb-6">
@@ -8,9 +58,104 @@ const Sidebar: React.FC = () => {
         <div className="space-y-4">
           <div className="p-4 bg-gray-50 rounded-lg">
             <h3 className="font-medium text-gray-700 mb-2">Selected Block</h3>
-            <p className="text-sm text-gray-500">No block selected</p>
+            {selectedBlock ? (
+              <div className="text-sm">
+                <p className="text-gray-700">
+                  <span className="font-medium">Type:</span> {selectedBlock.type}
+                </p>
+                <p className="text-gray-700">
+                  <span className="font-medium">ID:</span> {selectedBlock.id}
+                </p>
+              </div>
+            ) : (
+              <p className="text-sm text-gray-500">No block selected</p>
+            )}
           </div>
           
+          {selectedBlock && (
+            <div className="p-4 bg-gray-50 rounded-lg">
+              <h3 className="font-medium text-gray-700 mb-2">Visibility Rules</h3>
+              <div className="space-y-3">
+                {/* User State */}
+                <div className="space-y-2">
+                  <label className="flex items-center gap-2 text-sm text-gray-700">
+                    <input
+                      type="checkbox"
+                      checked={selectedBlock.visibility?.isLoggedIn ?? false}
+                      onChange={(e) => handleVisibilityChange('isLoggedIn', e.target.checked)}
+                      className="rounded"
+                    />
+                    Require Logged In
+                  </label>
+                  
+                  <label className="flex items-center gap-2 text-sm text-gray-700">
+                    <input
+                      type="checkbox"
+                      checked={selectedBlock.visibility?.isSubscribed ?? false}
+                      onChange={(e) => handleVisibilityChange('isSubscribed', e.target.checked)}
+                      className="rounded"
+                    />
+                    Require Subscribed
+                  </label>
+                </div>
+
+                {/* Subscription Tier */}
+                <div>
+                  <label className="block text-sm text-gray-700 mb-1">Subscription Tier</label>
+                  <select
+                    className="w-full p-2 border border-gray-300 rounded text-sm"
+                    value={selectedBlock.visibility?.subscriptionTier || ''}
+                    onChange={(e) => handleVisibilityChange('subscriptionTier', e.target.value || undefined)}
+                  >
+                    <option value="">Any tier</option>
+                    <option value="basic">Basic</option>
+                    <option value="premium">Premium</option>
+                    <option value="vip">VIP</option>
+                  </select>
+                </div>
+
+                {/* Platform */}
+                <div>
+                  <label className="block text-sm text-gray-700 mb-1">Platform</label>
+                  <div className="space-y-1">
+                    {(['mobile', 'desktop', 'tv'] as Platform[]).map((platform) => (
+                      <label key={platform} className="flex items-center gap-2 text-sm text-gray-700">
+                        <input
+                          type="checkbox"
+                          checked={selectedBlock.visibility?.platform?.includes(platform) ?? false}
+                          onChange={(e) => handlePlatformChange(platform, e.target.checked)}
+                          className="rounded"
+                        />
+                        {platform.charAt(0).toUpperCase() + platform.slice(1)}
+                      </label>
+                    ))}
+                  </div>
+                </div>
+
+                {/* Region */}
+                <div>
+                  <label className="block text-sm text-gray-700 mb-1">Region</label>
+                  <div className="space-y-1">
+                    {(['IN', 'US', 'UK', 'CA', 'AU']).map((region) => (
+                      <label key={region} className="flex items-center gap-2 text-sm text-gray-700">
+                        <input
+                          type="checkbox"
+                          checked={selectedBlock.visibility?.region?.includes(region) ?? false}
+                          onChange={(e) => handleRegionChange(region, e.target.checked)}
+                          className="rounded"
+                        />
+                        {region === 'IN' ? 'India' : 
+                         region === 'US' ? 'United States' : 
+                         region === 'UK' ? 'United Kingdom' : 
+                         region === 'CA' ? 'Canada' : 'Australia'}
+                      </label>
+                    ))}
+                  </div>
+                </div>
+              </div>
+            </div>
+          )}
+          
           <div className="p-4 bg-gray-50 rounded-lg">
             <h3 className="font-medium text-gray-700 mb-2">Properties</h3>
             <p className="text-sm text-gray-500">Select a block to edit properties</p>
diff --git a/src/components/blocks/SectionBlock.tsx b/src/components/blocks/SectionBlock.tsx
index 501435d..d8cdb5e 100644
--- a/src/components/blocks/SectionBlock.tsx
+++ b/src/components/blocks/SectionBlock.tsx
@@ -7,9 +7,17 @@ interface SectionBlockProps {
   block: SectionBlockType;
   renderContext: RenderContext;
   showDebug?: boolean;
+  onSelect?: (id: string) => void;
+  isSelected?: boolean;
 }
 
-const SectionBlock: React.FC<SectionBlockProps> = ({ block, renderContext, showDebug = false }) => {
+const SectionBlock: React.FC<SectionBlockProps> = ({ 
+  block, 
+  renderContext, 
+  showDebug = false, 
+  onSelect, 
+  isSelected = false 
+}) => {
   const { props, style, children } = block;
   const { title, description } = props;
   
@@ -29,15 +37,20 @@ const SectionBlock: React.FC<SectionBlockProps> = ({ block, renderContext, showD
                         style?.boxShadow === 'md' ? 'shadow-md' : 
                         style?.boxShadow === 'sm' ? 'shadow-sm' : '';
 
+  const handleClick = () => {
+    onSelect?.(block.id);
+  };
+
   return (
     <section 
       className={`${paddingClass} ${marginClass} ${borderRadiusClass} ${boxShadowClass} ${
         isDark ? 'bg-gray-800' : 'bg-white'
-      }`}
+      } cursor-pointer transition-all duration-200 ${isSelected ? 'ring-2 ring-blue-500' : ''}`}
       style={{
         backgroundColor: style?.backgroundColor,
         maxWidth: style?.maxWidth,
       }}
+      onClick={handleClick}
     >
       {/* Section header */}
       {(title || description) && (
@@ -63,7 +76,14 @@ const SectionBlock: React.FC<SectionBlockProps> = ({ block, renderContext, showD
       {children && children.length > 0 ? (
         <div className="space-y-4">
           {children.map((childBlock) => (
-            <BlockRenderer key={childBlock.id} block={childBlock} renderContext={renderContext} showDebug={showDebug} />
+            <BlockRenderer 
+              key={childBlock.id} 
+              block={childBlock} 
+              renderContext={renderContext} 
+              showDebug={showDebug}
+              onSelect={onSelect}
+              isSelected={false} // Nested blocks don't inherit parent selection
+            />
           ))}
         </div>
       ) : (
